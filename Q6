
class Solution{
    static int palindromicPartition(String str)
    {
        // code here
        
        int n = str.length() ;
        int[][] dp = new int[n][n] ;
        for(int[] row : dp){
            Arrays.fill(row,-1) ;
        }
        int count = solve(str , 0 , n-1 , dp) ;
        return count ;
    }
    static int solve(String str , int i , int j , int[][] dp){
        if(i>=j){
            return 0 ;
        }
        if(isPalindrome(str , i , j) == true){
            return 0 ;
        }
        if(dp[i][j] != -1){
            return dp[i][j] ;
        }
        int mn = Integer.MAX_VALUE ;
        for(int k = i ; k < j  ; k++){
            int left = 0 , right = 0 ;
            if(dp[i][k] != -1){
                left = dp[i][k] ;
                
            }else{
                left = solve(str , i , k , dp) ;
                dp[i][k] = left ;
            }
            if(dp[k+1][j] != -1){
                right = dp[k+1][j] ;
            }else{
                right = solve(str , k+1 , j , dp) ;
                dp[k+1][j] = right ;
            }
            int temp = left + right + 1 ;
            if(temp<mn){
                mn = temp ;
            }
        }
        dp[i][j] = mn ;
        return dp[i][j] ;
    }
    static boolean isPalindrome(String str , int i , int j){
        if(i>=j){
            return true ;
        }
        while(i<j){
            if(str.charAt(i) != str.charAt(j)){
                return false ;
            }
            i++ ;
            j-- ;
        }
        return true ;
    }
}
